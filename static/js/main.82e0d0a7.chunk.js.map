{"version":3,"sources":["components/TableView/tableView.js","App.js","serviceWorker.js","index.js"],"names":["TableView","props","className","size","pagination","pageSize","columns","dataSource","data","Header","Layout","Content","Footer","App","input","columnsFromInput","dataFromInput","name","age","emailAdress","status","dateRegisteted","Object","keys","forEach","item","push","title","dataIndex","key","map","index","sorter","a","b","localeCompare","sortDirections","render","text","address","style","backgroundColor","color","height","textAlign","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAceA,MAXf,SAAmBC,GACf,OACI,kBAAC,IAAD,CAAOC,UAAU,eACVC,KAAK,SACLC,WAAY,CAACC,SAAU,GACvBC,QAASL,EAAMK,QACfC,WAAYN,EAAMO,QCJ1BC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,QAASC,EAAUF,IAAVE,OAiNTC,MA/Mf,WAEI,IAsD6BC,EAHvBC,EAAmB,GACnBC,EAAgB,GAEOF,EAtDP,CAClB,CACIG,KAAM,QACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,cAEpB,CACIJ,KAAM,QACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,cAEpB,CACIJ,KAAM,OACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,cAEpB,CACIJ,KAAM,QACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,cAEpB,CACIJ,KAAM,SACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,cAEpB,CACIJ,KAAM,UACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,cAEpB,CACIJ,KAAM,QACNC,IAAK,KACLC,YAAa,gBACbC,OAAQ,SACRC,eAAgB,eAOTC,OAAOC,KAAKT,EAAM,IACxBU,SAAQ,SAAAC,GAAI,OACbV,EAAiBW,KACb,CACIC,MAAOF,EACPG,UAAWH,EACXI,IAAKJ,OAIjBX,EAAMgB,KAAI,SAACL,EAAMM,GAEb,OADAN,EAAKI,IAAME,EACJf,EAAcU,KACjBD,MAMZV,EAAiB,GAAGiB,OAAS,SAACC,EAAGC,GAAJ,OAAUD,EAAEhB,KAAKkB,cAAcD,EAAEjB,OAC9DF,EAAiB,GAAGqB,eAAiB,CAAC,UAEtC,IAAM9B,EAAU,CACZ,CACIqB,MAAO,OACPC,UAAW,OACXC,IAAK,OACLQ,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAExB,CACIX,MAAO,MACPC,UAAW,MACXC,IAAK,OAET,CACIF,MAAO,UACPC,UAAW,UACXC,IAAK,WAET,CACIF,MAAO,SACPE,IAAK,WAIPrB,EAAO,CACT,CACIqB,IAAK,IACLZ,KAAM,aACNC,IAAK,GACLqB,QAAS,4BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,0BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,0BAEb,CACIV,IAAK,IACLZ,KAAM,aACNC,IAAK,GACLqB,QAAS,4BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,0BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,0BAEb,CACIV,IAAK,IACLZ,KAAM,aACNC,IAAK,GACLqB,QAAS,4BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,0BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,0BAEb,CACIV,IAAK,IACLZ,KAAM,aACNC,IAAK,GACLqB,QAAS,4BAEb,CACIV,IAAK,IACLZ,KAAM,aACNC,IAAK,GACLqB,QAAS,4BAEb,CACIV,IAAK,IACLZ,KAAM,YACNC,IAAK,GACLqB,QAAS,2BAKjB,OACI,kBAAC,IAAD,KACI,kBAAC9B,EAAD,CAAQ+B,MAAO,CAACC,gBAAiB,YAC7B,wBAAID,MAAO,CAACE,MAAO,UAAnB,0BAEJ,kBAAC/B,EAAD,CAAST,UAAU,WACf,qCACA,kBAAC,IAAD,CAAOA,UAAU,eACb,kBAAC,EAAD,CAAWI,QAASS,EAAkBP,KAAMQ,KAEhD,qCACA,kBAAC,IAAD,CAAOd,UAAU,eACb,kBAAC,EAAD,CAAWI,QAASA,EAASE,KAAMA,KAEvC,0CACA,kBAAC,IAAD,CAAON,UAAU,eACb,kBAAC,EAAD,CAAWI,QAASA,EAASE,KAAMA,KAEvC,wDACA,kBAAC,IAAD,CAAON,UAAU,eACb,kBAAC,EAAD,CAAWI,QAASA,EAASE,KAAMA,MAG3C,kBAACI,EAAD,CAAQ4B,MAAO,CAACG,OAAQ,GAAIC,UAAW,SAAUH,gBAAiB,UAAWC,MAAO,UAApF,uBCpMQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82e0d0a7.chunk.js","sourcesContent":["import React from \"react\";\nimport {Table} from 'antd'\n\nfunction TableView(props){\n    return(\n        <Table className=\"table-custom\"\n               size=\"middle\"\n               pagination={{pageSize: 5}}\n               columns={props.columns}\n               dataSource={props.data}>\n        </Table>\n    )\n}\n\nexport default TableView","import React from 'react';\nimport './App.css';\nimport {Layout, Space} from 'antd'\nimport TableView from \"./components/TableView/tableView\";\n\nconst {Header, Content, Footer} = Layout;\n\nfunction App() {\n\n    const inputDataMock = [\n        {\n            name: \"Artem\",\n            age: \"30\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n        {\n            name: \"Elena\",\n            age: \"35\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n        {\n            name: \"Carl\",\n            age: \"20\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n        {\n            name: \"Pavle\",\n            age: \"45\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n        {\n            name: \"Andrew\",\n            age: \"19\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n        {\n            name: \"Vasiliy\",\n            age: \"23\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n        {\n            name: \"Lubov\",\n            age: \"30\",\n            emailAdress: \"artem@mail.ru\",\n            status: \"active\",\n            dateRegisteted: \"12.03.2019\"\n        },\n    ];\n    const columnsFromInput = [];\n    const dataFromInput = [];\n\n    function splitColumnsAndData(input) {\n        let keys = Object.keys(input[0]);\n        keys.forEach(item => (\n            columnsFromInput.push(\n                {\n                    title: item,\n                    dataIndex: item,\n                    key: item\n                }\n            )\n        ));\n        input.map((item, index) => {\n            item.key = index;\n            return dataFromInput.push(\n                item\n            )\n        })\n    }\n\n    splitColumnsAndData(inputDataMock);\n    columnsFromInput[0].sorter = (a, b) => a.name.localeCompare(b.name);\n    columnsFromInput[0].sortDirections = ['ascend'];\n\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: text => <a>{text}</a>,\n        },\n        {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n        },\n        {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n        },\n    ];\n\n    const data = [\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n        },\n        {\n            key: '2',\n            name: 'Jim Green',\n            age: 42,\n            address: 'London No. 1 Lake Park',\n        },\n        {\n            key: '3',\n            name: 'Joe Black',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n        },\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n        },\n        {\n            key: '2',\n            name: 'Jim Green',\n            age: 42,\n            address: 'London No. 1 Lake Park',\n        },\n        {\n            key: '3',\n            name: 'Joe Black',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n        },\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n        },\n        {\n            key: '2',\n            name: 'Jim Green',\n            age: 42,\n            address: 'London No. 1 Lake Park',\n        },\n        {\n            key: '3',\n            name: 'Joe Black',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n        },\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n        },\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n        },\n        {\n            key: '3',\n            name: 'Joe Black',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n        },\n\n    ];\n\n    return (\n        <Layout>\n            <Header style={{backgroundColor: \"#2199e8\"}}>\n                <h1 style={{color: \"white\"}}>SQA Mate Admin pannel</h1>\n            </Header>\n            <Content className=\"content\">\n                <h2>Users</h2>\n                <Space className=\"table-space\">\n                    <TableView columns={columnsFromInput} data={dataFromInput}/>\n                </Space>\n                <h2>Tests</h2>\n                <Space className=\"table-space\">\n                    <TableView columns={columns} data={data}/>\n                </Space>\n                <h2>Audit logs</h2>\n                <Space className=\"table-space\">\n                    <TableView columns={columns} data={data}/>\n                </Space>\n                <h2>Number of tests per date</h2>\n                <Space className=\"table-space\">\n                    <TableView columns={columns} data={data}/>\n                </Space>\n            </Content>\n            <Footer style={{height: 50, textAlign: 'center', backgroundColor: \"#2199e8\", color: \"white\"}}>SQA Mate Â©2020\n            </Footer>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}